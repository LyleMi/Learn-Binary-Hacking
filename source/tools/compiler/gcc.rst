gcc 
========================================

常规选项
----------------------------------------
- ``-c`` 只执行预处理、编译、汇编，不执行链接过程
- ``-E`` 输出预处理文件
- ``-g`` 在可执行程序中包含标准调试信息
- ``-I <dir>`` 在头文件的搜索路径列表中添加dir目录
- ``-L <dir>`` 在库文件的搜索路径列表中添加dir目录
- ``-o <filename>`` 设置生成的文件名
- ``-Ox`` 设置优化的等级
- ``-s`` 去掉符号
- ``-S`` 输出汇编文件
- ``-v`` 打印出编译器内部编译各过程的命令行信息和编译器的版本

支持标准
----------------------------------------
- ``-ansi``
    - 在 C 模式下，等同 ``--std=c90``
    - 在 C 模式下，等同 ``--std=c++98``
- ``-std=``
    - ``c90``
    - ``c89``
    - ``iso9899:1990``
    - ``iso9899:199409``
    - ``c99``
    - ``c9x``
    - ``iso9899:1999``
    - ``iso9899:199x``
    - ``c11``
    - ``c1x``
    - ``iso9899:2011``
    - ``c17``
    - ``c18``
    - ``iso9899:2017``
    - ``iso9899:2018``
    - ``c2x``
    - ``gnu90``
    - ``gnu89``
    - ``gnu99``
    - ``gnu9x``
    - ``gnu11``
    - ``gnu1x``
    - ``gnu17``
    - ``gnu18``
    - ``gnu2x``
    - ``c++98``
    - ``c++03``
    - ``gnu++98``
    - ``gnu++03``
    - ``c++11``
    - ``c++0x``
    - ``gnu++11``
    - ``gnu++0x``
    - ``c++14``
    - ``c++1y``
    - ``gnu++14``
    - ``gnu++1y``
    - ``c++17``
    - ``c++1z``
    - ``gnu++17``
    - ``gnu++1z``
    - ``c++20``
    - ``c++2a``
    - ``gnu++20``
    - ``gnu++2a``
    - ``c++2b``
    - ``c++23``
    - ``gnu++2b``
    - ``gnu++23``

链接器
----------------------------------------
- ``-Wl`` 后面的参数传递给链接器

安全相关选项
----------------------------------------
- ``-fno-exceptions`` 不使用异常
- ``-fno-stack-protector`` 不开启canary栈溢出检测
- ``-fstack-protector-all`` 开启栈溢出保护选项
- ``-z execstack`` 开启栈可执行关闭NX
- ``-z noexecstack`` 开启NX保护

体系结构相关选项
----------------------------------------
- ``-m32`` 生成32bit程序需要gcc-multilib (x86机器上编译不用加)
- ``-mcpu=type`` 针对不同的CPU使用相应的CPU指令，type可为i386/i486/pentium/i686等
- ``-mieee-fp`` 使用IEEE标准进行浮点数的比较
- ``-mno-ieee-fp`` 不使用IEEE标准进行浮点数的比较
- ``-mrtd`` 强行将函数参数个数固定的函数用 ``ret NUM`` 返回，节省调用函数的一条指令
- ``-mshort`` 把int类型作为16位处理，相当于short int
- ``-msoft-float`` 输出包含浮点库调用的目标代码

报警相关选项
----------------------------------------
- ``-ansi`` 支持符合ANSI标准的C程序
- ``-pedantic`` 允许发出ANSI C标准所列的全部警告信息
- ``-pedantic-error`` 允许发出ANSI C标准所列的全部错误信息
- ``-w`` 关闭所有告警
- ``-Wall`` 允许发出Gcc提供的所有有用的报警信息
- ``-Werror`` 把所有的告警信息转化为错误信息，并在告警发生时终止编译过程

参考链接
----------------------------------------
- `Using the GNU Compiler Collection <https://gcc.gnu.org/onlinedocs/gcc/index.html>`_

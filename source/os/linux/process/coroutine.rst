协程
========================================
协程可以当作用户态的线程，其调度状态由用户态决定。用户态的优势使得其在调度时不用触发大量系统调用，也不依赖于时钟阻塞。

另外协程的轻量级也减少了创建线程、切换线程的性能损耗。

根据协程之间是否存在调用栈，协程可以分为有栈协程和无栈协程。

有栈协程的实现类似内核中的线程，不同协程间切换还是需要切换上下文，典型代表有：goroutine、libco。无栈协程的上下文则在公共内存中，在协程切换时通过状态机切换，典型代表是 JavaScript、Rust、C++ 20。

协程也可以分为 对称协程 (Symmetric Coroutine) 和 非对称协程 (Asymmetric Coroutine) 。非对称协程是协程之间拥有调用栈，协程间存在调用和被调用关系。对称协程则互相之间不存在调用关系。
